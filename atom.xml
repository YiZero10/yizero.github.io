<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero&#39;s Blog</title>
  
  <subtitle>Can I go where you go?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yizero10.github.io/"/>
  <updated>2020-07-09T09:25:21.997Z</updated>
  <id>https://yizero10.github.io/</id>
  
  <author>
    <name>Zero Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于南京</title>
    <link href="https://yizero10.github.io/2020/07/09/%E5%85%B3%E4%BA%8E%E5%8D%97%E4%BA%AC/"/>
    <id>https://yizero10.github.io/2020/07/09/%E5%85%B3%E4%BA%8E%E5%8D%97%E4%BA%AC/</id>
    <published>2020-07-09T06:37:31.000Z</published>
    <updated>2020-07-09T09:25:21.997Z</updated>
    
    <content type="html"><![CDATA[<img src="https://zero-pic-bed.oss-cn-shanghai.aliyuncs.com/uPic/07-09-01-07-09-01-07-09-01-54CB8E07-1352-46D8-997C-EA76E48110A3.jpeg" alt="image-20200709012402620" style="zoom:30%;"><h2 id="区域划分及地铁路线分布"><a href="#区域划分及地铁路线分布" class="headerlink" title="区域划分及地铁路线分布"></a>区域划分及地铁路线分布</h2><p>路线查看App：Metroman</p><p>公共交通付费方式：支付宝扫码（南京地铁电子卡、金陵通乘车卡）</p><img src="https://zero-pic-bed.oss-cn-shanghai.aliyuncs.com/uPic/07-09-01-FC01FCB1-9ABD-4A6E-83DE-42CB11AFC43B.jpeg" style="zoom:50%;"><h2 id="旅游小Tips"><a href="#旅游小Tips" class="headerlink" title="旅游小Tips"></a>旅游小Tips</h2><h3 id="关于住宿"><a href="#关于住宿" class="headerlink" title="关于住宿"></a>关于住宿</h3><ul><li>最好选择靠近地铁站的地方入住</li><li>综合经济能力，尽量选择靠近市区的地方</li></ul><h3 id="关于交通"><a href="#关于交通" class="headerlink" title="关于交通"></a>关于交通</h3><ul><li>一般都是地铁，可以提前规划按照地铁线路来安排行程（超方便</li><li>⚠️注意地铁的运营时间，太晚就停运只能打车 <a href="http://nj.bendibao.com/ditie/time.shtml" target="_blank" rel="noopener">查看运营时间</a></li><li>根据目的地选择路线，一般用高德地图都没有坑</li></ul><h3 id="关于吃喝"><a href="#关于吃喝" class="headerlink" title="关于吃喝"></a>关于吃喝</h3><ul><li>特色的餐厅or小吃一般都会偏甜</li><li>不知道吃啥，小红书搜出来的一般是没有坑的，基本都在新街口附近</li><li>一般都要提前排号，饭点排队人超多</li></ul><h2 id="热门打卡地点"><a href="#热门打卡地点" class="headerlink" title="热门打卡地点"></a>热门打卡地点</h2><h3 id="南京博物院"><a href="#南京博物院" class="headerlink" title="南京博物院"></a>南京博物院</h3><ul><li>门票🎫免费，提前预约（微信小程序：南京博物院）</li><li>地铁站：二号线·明故宫站 一号出口（还需要走几分钟的路）</li><li>游玩时长：2～3h （没有把所有馆都逛一遍，去了历史馆、数字馆、艺术馆、民国馆</li><li>tips：<ul><li>一定要提前预约</li><li>提前去排队，节假日的时候队超级长</li><li>一定要带身份证</li><li>自行备水 </li></ul></li></ul><h3 id="明孝陵"><a href="#明孝陵" class="headerlink" title="明孝陵"></a>明孝陵</h3><p>一个很大景区，就选择性的去了几个点而已</p><h4 id="中山陵"><a href="#中山陵" class="headerlink" title="中山陵"></a>中山陵</h4><ul><li>不需要门票，提前预约即可</li><li>地铁站：二号线·钟灵街</li><li>tips：<ul><li>建议早上去，夏天中午太热</li><li>记得备水</li><li>不喜欢爬山的建议放弃，有超多楼梯，然后上去看5分钟而已就下来了</li><li>不过在最上面的视野超棒的</li><li>如果要去美龄宫、音乐台等其他景点，买个观光车的票，否则会累死</li></ul></li></ul><h4 id="美龄宫"><a href="#美龄宫" class="headerlink" title="美龄宫"></a>美龄宫</h4><ul><li>需要购买门票🎫</li><li>逛完中山陵即可，可以买联票，顺便去音乐台</li><li>民国别墅，仅是参观</li></ul><h4 id="音乐台"><a href="#音乐台" class="headerlink" title="音乐台"></a>音乐台</h4><ul><li>需要购买门票🎫</li><li>极限挑战取景过，就是张艺兴怕尖嘴动物那一期</li><li>有很多鸽子</li><li>暂时没去过，我看过学姐发图，好像还不错，mark了</li></ul><h4 id="梅花山"><a href="#梅花山" class="headerlink" title="梅花山"></a>梅花山</h4><ul><li>需要购买门票🎫，有学生票</li><li>地铁站：二号线·苜蓿园</li><li>具有季节性，最好梅花盛开的季节前往</li></ul><h3 id="老门东"><a href="#老门东" class="headerlink" title="老门东"></a>老门东</h3><ul><li>不需要门票</li><li>地铁站：三号线·武定门</li><li>个人觉得比夫子庙好，也可以先去夫子庙再到老门东，两处挨着</li><li>游玩时长：1～2h</li><li>tips：<ul><li>小姐姐可以穿汉服拍照📷</li><li>尽量选择在老门东吃东西，夫子庙有点是骗游客的</li></ul></li><li>美食街店铺亲测<ul><li>小郑酥烧饼：梅干菜烧饼</li><li>蒋有记牛肉锅贴：牛肉锅贴、小馄饨</li><li>鸡鸣汤包：xx汤包、小馄饨</li><li>沈记臭豆腐</li><li>蓝老大糖藕店（甜）</li></ul></li><li>老南京 又见炊烟·柴火馄饨：三条营10号，要仔细找，在小巷子里面，老爷爷老奶奶开了几十年，门店很旧，充满时代感</li></ul><img src="https://zero-pic-bed.oss-cn-shanghai.aliyuncs.com/uPic/07-09-17-IMG_3042.JPG" alt="IMG_3042" style="zoom:100%;"><h3 id="鸡鸣寺"><a href="#鸡鸣寺" class="headerlink" title="鸡鸣寺"></a>鸡鸣寺</h3><ul><li>需要购买门票🎫，无学生优惠，有点坑（现场只能用纸币购买</li><li>地铁站：三号线/四号线·鸡鸣寺站</li><li>据说求姻缘很灵，大家快冲</li></ul><h3 id="明城墙"><a href="#明城墙" class="headerlink" title="明城墙"></a>明城墙</h3><ul><li>需要购买门票</li><li>在鸡鸣寺附近，在可以绕着城墙走，环着玄武湖</li><li>下来没有其他安排，可以在玄武湖划船hhh</li></ul><h3 id="五台山先锋书店总店"><a href="#五台山先锋书店总店" class="headerlink" title="五台山先锋书店总店"></a>五台山先锋书店总店</h3><ul><li>地铁站：一号线·珠江路（下地铁还要走蛮久的路，建议打车or共享单车</li><li>拍照打卡，寄明信片</li></ul><p><img src="https://zero-pic-bed.oss-cn-shanghai.aliyuncs.com/uPic/07-09-17-IMG_2452.JPG" alt="IMG_2452"></p><h3 id="关于新街口"><a href="#关于新街口" class="headerlink" title="关于新街口"></a>关于新街口</h3><ul><li><p>各种品牌专柜，门店……（每次进去都剁手</p></li><li><p>吃喝门店</p><ul><li>南京大牌档<ul><li>美龄粥</li><li>烤鸭包</li><li>江米扣肉</li><li>地锅小公鸡</li><li>招牌咸水鸭</li><li>蟹黄包</li><li>……</li></ul></li><li>桂满陇</li><li>明发茶餐厅</li><li>点都德</li><li>魂蛋汉堡</li><li>小杨生煎</li><li>首尔大排档</li><li>西木栗子（仙豆糕超好吃</li><li>泸溪河</li><li>喜茶、乐乐茶、奈雪的茶</li><li>……（待打卡</li></ul><p><img src="https://zero-pic-bed.oss-cn-shanghai.aliyuncs.com/uPic/07-09-17-07-09-16-IMG_4293.JPEG" alt="IMG_4293"></p></li></ul>]]></content>
    
    <summary type="html">
    
      吐血整理亲身体验的南京小攻略，陆续更新……
    
    </summary>
    
    
      <category term="Life" scheme="https://yizero10.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="https://yizero10.github.io/tags/Life/"/>
    
      <category term="Trip" scheme="https://yizero10.github.io/tags/Trip/"/>
    
  </entry>
  
  <entry>
    <title>初识微服务</title>
    <link href="https://yizero10.github.io/2020/03/25/%E5%88%9D%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://yizero10.github.io/2020/03/25/%E5%88%9D%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-03-25T08:47:53.000Z</published>
    <updated>2020-03-25T09:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识微服务"><a href="#初识微服务" class="headerlink" title="初识微服务"></a>初识微服务</h2><h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>将原本独立的系统拆分成多个小型服务</li><li>这些小型服务各自独立（各自维护自身的数据存储，业务开发，自动化测试以及独立部署机制独立扩展）</li><li>服务之间通过基于HTTP的RESTful API进行通信协作</li><li>更为准确的为每一个服务评估性能容量</li><li>轻量级的通信协作</li><li>可以用不同语言来编写</li></ul><h3 id="存在的挑战"><a href="#存在的挑战" class="headerlink" title="存在的挑战"></a>存在的挑战</h3><ul><li>运维人员需要维护的进程数量增加</li><li>接口要保持一致性，原本单体应用中的代码依赖变成了服务之间的通信依赖</li><li>分布式的复杂性，需要考虑诸多因素 如网络延时、分布式事务、异步消息…</li></ul><h3 id="九大特性"><a href="#九大特性" class="headerlink" title="九大特性"></a>九大特性</h3><h4 id="服务组件化"><a href="#服务组件化" class="headerlink" title="服务组件化"></a>服务组件化</h4><ul><li>一种进程外的组件</li><li>通过HTTP等通信协议进行协作</li></ul><h4 id="按业务组织团队"><a href="#按业务组织团队" class="headerlink" title="按业务组织团队"></a>按业务组织团队</h4><ul><li>按照业务线的方式进行拆分</li><li>有效减少服务内部修改所产生的内耗</li><li>团队边界更为清晰</li></ul><h4 id="做“产品”的态度"><a href="#做“产品”的态度" class="headerlink" title="做“产品”的态度"></a>做“产品”的态度</h4><ul><li>每个小团队都应该以做产品的方式，对产品的整个生命周期负责</li></ul><h4 id="智能端点与哑管道"><a href="#智能端点与哑管道" class="headerlink" title="智能端点与哑管道"></a>智能端点与哑管道</h4><ul><li><p>不再如同单体应用的组件直接通过函数调用进行交互协作</p></li><li><p>由于服务不再一个进程中，组件间的通信模式发生了改变</p></li><li><p>若仅仅是RPC的方式调用，会导致微服务之间繁琐的通信</p><p>更粗粒度的通信协议，微服务架构中，通常以这两种服务调用方式</p></li><li><p>使用HTTP的<code>RESTful API</code>或轻量级的消息发送协议，实现信息传递与服务调用的触发</p></li><li><p>通过再轻量级的消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的中间件</p></li></ul><h4 id="去中心化治理"><a href="#去中心化治理" class="headerlink" title="去中心化治理"></a>去中心化治理</h4><h4 id="去中心化管理数据"><a href="#去中心化管理数据" class="headerlink" title="去中心化管理数据"></a>去中心化管理数据</h4><ul><li>将原数据库中的存储内容拆分到新的同平台的其他数据库实例中</li><li>将一些具有特殊结构或者业务特性的数据存储到一些其他技术的数据库实例中(如把日志信息存储到MongoDB中或者用户登录信息存储到Redis中)</li></ul><h4 id="基础设施自动化"><a href="#基础设施自动化" class="headerlink" title="基础设施自动化"></a>基础设施自动化</h4><ul><li>自动化测试</li><li>自动化部署</li></ul><h4 id="容错设计"><a href="#容错设计" class="headerlink" title="容错设计"></a>容错设计</h4><ul><li>部分服务出现故障，而其他服务仍可正常运行</li><li>但是设计时必须要考虑自动恢复服务，当故障蔓延的时候必须要快速检查出故障源</li><li>因此希望再每个服务中实现监控和日志记录的组件，比如服务状态、断路器状态、吞吐量、网络延迟等关键数据的仪表盘等</li></ul><h4 id="演进式设计"><a href="#演进式设计" class="headerlink" title="演进式设计"></a>演进式设计</h4><ul><li>初期使用单体系统的方式来设计与实施</li><li>随着系统的发展或者业务的需要，将一些经常变动或者是有一定时间效应的内容进行微服务处理</li><li>逐渐将单体系统中多变的模块逐步拆分出来</li><li>而稳定不多变的模块就形成一个核心微服务</li></ul><h3 id="微服务架构初期"><a href="#微服务架构初期" class="headerlink" title="微服务架构初期"></a>微服务架构初期</h3><p>在微服务架构初期，有一些需要解决的问题，下列是各个问题的一些开源解决方案</p><ul><li><p>服务治理</p><p>阿里巴巴开源的Dubbo和当当网在其基础上扩展的DubboX，Netfix的Eureka，Apache的Consul… </p></li><li><p>分布式配置管理</p><p>百度的Disconf，Netfix的Archaius，360的QConf，Spring Cloud的Config，淘宝的Diamond…</p></li><li><p>批量任务</p><p>当当网的Elastic-Job，LinkedIn的Azkaban，Spring Cloud的Task…</p></li><li><p>服务跟踪</p><p>京东的Hydra，Spring Cloud的Sleuth，Twitter的Zipkin</p></li></ul><h3 id="为什么选择Spring-Cloud"><a href="#为什么选择Spring-Cloud" class="headerlink" title="为什么选择Spring Cloud"></a>为什么选择Spring Cloud</h3><p>前面列举的框架，只是解决微服务中的某一个问题，而Spring Cloud则是一个解决微服务架构实施的综合性解决框架，在Spring社区的整合下，做了大量的兼容性测试，保证了其拥有更好的稳定性。</p>]]></content>
    
    <summary type="html">
    
      关于微服务的初步认识，以及其存在的优势
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="https://yizero10.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="微服务" scheme="https://yizero10.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Spring Cloud" scheme="https://yizero10.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Redis之BitMap</title>
    <link href="https://yizero10.github.io/2020/03/23/Redis%D6%AEBitMap/"/>
    <id>https://yizero10.github.io/2020/03/23/Redis%D6%AEBitMap/</id>
    <published>2020-03-22T17:04:48.000Z</published>
    <updated>2020-03-22T18:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis的BitMap"><a href="#Redis的BitMap" class="headerlink" title="Redis的BitMap"></a>Redis的BitMap</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>通过一个bit位来表示某个元素对应的值或者状态，其中的key就是对应元素本身</li><li>版本：redis 2.2.0</li><li>新增 setbit,getbit,bitcount几个bitmap相关命令</li></ul><h4 id="setbit命令说明"><a href="#setbit命令说明" class="headerlink" title="setbit命令说明"></a>setbit命令说明</h4><p>指令 <code>setbit key offset value</code></p><ul><li>复杂度o(1)</li><li>设置或者清空key的取决于value(字符串)在offset处的bit值(只能只0或者1)</li><li>字符串会进行伸展(grown)以确保它可以将value 保存在指定的偏移量上。当字符串值进行伸展时，空白位置以 0 填充。</li><li>offset参数必须大于或等于0，小于2^32</li><li><strong>返回值</strong>  字符串值指定偏移量上原来存储的位（bit)</li></ul><h4 id="getbit命令说明"><a href="#getbit命令说明" class="headerlink" title="getbit命令说明"></a>getbit命令说明</h4><p>指令<code>getbit key offest</code></p><ul><li>对 <code>key</code> 所储存的字符串值，获取指定偏移量上的位(bit)。</li><li>当 <code>offset</code> 比字符串值的长度大，或者 <code>key</code> 不存在时，返回 <code>0</code> </li><li><strong>返回值</strong> 字符串指定偏移量上的位</li></ul><h4 id="bitcount命令说明"><a href="#bitcount命令说明" class="headerlink" title="bitcount命令说明"></a>bitcount命令说明</h4><p>指令<code>bitcount key</code>、<code>bitcount key start end</code></p><ul><li>计算给定字符串中，被设置为1的比特位的数量</li><li>一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 <code>start</code> 或 <code>end</code> 参数，可以让计数只在特定的位上进行</li><li><code>start</code> 和 <code>end</code> 参数的设置和 <code>GETRANGE</code> 命令类似，都可以使用负数值： 比如 <code>-1</code> 表示最后一个字节， <code>-2</code>表示倒数第二个字节，以此类推</li><li>不存在的 <code>key</code> 被当成是空字符串来处理，因此对一个不存在的 <code>key</code> 进行 <code>BITCOUNT</code> 操作，结果为 0。</li><li><strong>返回值</strong> 被设置为1的位的数量</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="1-用户签到"><a href="#1-用户签到" class="headerlink" title="1. 用户签到"></a>1. 用户签到</h5><pre class=" language-java"><code class="language-java">Jedis redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.31.89"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户uid</span>String uid <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>String cacheKey <span class="token operator">=</span> <span class="token string">"sign_"</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录有uid的key</span><span class="token comment" spellcheck="true">// $cacheKey = sprintf("sign_%d", $uid);</span><span class="token comment" spellcheck="true">//开始有签到功能的日期</span>String startDate <span class="token operator">=</span> <span class="token string">"2017-01-01"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//今天的日期</span>String todayDate <span class="token operator">=</span> <span class="token string">"2017-01-21"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算offset(时间戳)</span><span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token function">dateParase</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> todayTime <span class="token operator">=</span> <span class="token function">dateParase</span><span class="token punctuation">(</span>todayDate<span class="token punctuation">,</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todayTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是第"</span><span class="token operator">+</span>offset<span class="token operator">+</span><span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//签到</span><span class="token comment" spellcheck="true">//一年一个用户会占用多少空间呢？大约365/8=45.625个字节，好小，有木有被惊呆？</span>redis<span class="token punctuation">.</span><span class="token function">setbit</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span>offset<span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询签到情况</span><span class="token keyword">boolean</span> bitStatus <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">getbit</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否已经签到</span><span class="token comment" spellcheck="true">//计算总签到次数</span><span class="token keyword">long</span> qdCount <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-统计活跃用户"><a href="#2-统计活跃用户" class="headerlink" title="2. 统计活跃用户"></a>2. 统计活跃用户</h5><p> 使用时间作为cacheKey，然后用户ID为offset，如果当日活跃过就设置为1 那么我该如果计算某几天/月/年的活跃用户呢(暂且约定，统计时间内只有有一天在线就称为活跃)</p><p><strong>一个新的命令</strong>  <code>BITOP operation destkey key [key ...]</code></p><p><strong>说明</strong> ：</p><ol><li>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上</li><li>BITOP 命令支持 AND 、 OR 、 NOT 、 XOR 这四种操作中的任意一种参数 </li></ol><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span>dateActiveuser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Jedis redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.31.89"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> temp01 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span>temp01List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>temp01List<span class="token punctuation">,</span>temp01<span class="token punctuation">)</span><span class="token punctuation">;</span>dateActiveuser<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2017-01-10"</span><span class="token punctuation">,</span>temp01List<span class="token punctuation">)</span><span class="token punctuation">;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> temp02 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span>temp02List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>temp02List<span class="token punctuation">,</span>temp02<span class="token punctuation">)</span><span class="token punctuation">;</span>dateActiveuser<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2017-01-11"</span><span class="token punctuation">,</span>temp02List<span class="token punctuation">)</span><span class="token punctuation">;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> temp03 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span>temp03List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>temp03List<span class="token punctuation">,</span>temp03<span class="token punctuation">)</span><span class="token punctuation">;</span>dateActiveuser<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2017-01-12"</span><span class="token punctuation">,</span>temp03List<span class="token punctuation">)</span><span class="token punctuation">;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> temp04 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span>temp04List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>temp04List<span class="token punctuation">,</span>temp04<span class="token punctuation">)</span><span class="token punctuation">;</span>dateActiveuser<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2017-01-13"</span><span class="token punctuation">,</span>temp04List<span class="token punctuation">)</span><span class="token punctuation">;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> temp05 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span>temp05List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>temp05List<span class="token punctuation">,</span>temp05<span class="token punctuation">)</span><span class="token punctuation">;</span>dateActiveuser<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2017-01-14"</span><span class="token punctuation">,</span>temp05List<span class="token punctuation">)</span><span class="token punctuation">;</span>String date<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"2017-01-10"</span><span class="token punctuation">,</span><span class="token string">"2017-01-11"</span><span class="token punctuation">,</span><span class="token string">"2017-01-12"</span><span class="token punctuation">,</span><span class="token string">"2017-01-13"</span><span class="token punctuation">,</span><span class="token string">"2017-01-14"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试数据放入redis中</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>date<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dateActiveuser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        redis<span class="token punctuation">.</span><span class="token function">setbit</span><span class="token punctuation">(</span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dateActiveuser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//bitOp</span>redis<span class="token punctuation">.</span><span class="token function">bitop</span><span class="token punctuation">(</span>BitOP<span class="token punctuation">.</span>AND<span class="token punctuation">,</span> <span class="token string">"stat"</span><span class="token punctuation">,</span> <span class="token string">"stat_2017-01-10"</span><span class="token punctuation">,</span> <span class="token string">"stat_2017-01-11"</span><span class="token punctuation">,</span><span class="token string">"stat_2017-01-12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总活跃用户："</span><span class="token operator">+</span>redis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"stat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redis<span class="token punctuation">.</span><span class="token function">bitop</span><span class="token punctuation">(</span>BitOP<span class="token punctuation">.</span>AND<span class="token punctuation">,</span> <span class="token string">"stat1"</span><span class="token punctuation">,</span> <span class="token string">"stat_2017-01-10"</span><span class="token punctuation">,</span> <span class="token string">"stat_2017-01-11"</span><span class="token punctuation">,</span><span class="token string">"stat_2017-01-14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总活跃用户："</span><span class="token operator">+</span>redis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"stat1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redis<span class="token punctuation">.</span><span class="token function">bitop</span><span class="token punctuation">(</span>BitOP<span class="token punctuation">.</span>AND<span class="token punctuation">,</span> <span class="token string">"stat2"</span><span class="token punctuation">,</span> <span class="token string">"stat_2017-01-10"</span><span class="token punctuation">,</span> <span class="token string">"stat_2017-01-11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总活跃用户："</span><span class="token operator">+</span>redis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"stat2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>假设当前站点有5000W用户，那么一天的数据大约为50000000/8/1024/1024=6MB</p><h5 id="3-用户在线状态"><a href="#3-用户在线状态" class="headerlink" title="3. 用户在线状态"></a>3. 用户在线状态</h5><p>前段时间开发一个项目，对方给我提供了一个查询当前用户是否在线的接口。不了解对方是怎么做的，自己考虑了一下，使用bitmap是一个节约空间效率又高的一种方法，只需要一个key，然后用户ID为offset，如果在线就设置为1，不在线就设置为0，和上面的场景一样，5000W用户只需要6MB的空间。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//批量设置在线状态</span><span class="token variable">$uids</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$uids</span> <span class="token keyword">as</span> <span class="token variable">$uid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setBit</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span> <span class="token variable">$uid</span><span class="token punctuation">,</span> <span class="token variable">$uid</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一个一个获取状态</span><span class="token variable">$uids</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$startTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$uids</span> <span class="token keyword">as</span> <span class="token variable">$uid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getBit</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span> <span class="token variable">$uid</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$endTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在我的电脑上，获取50W个用户的状态需要25秒</span><span class="token keyword">echo</span> <span class="token string">"total:"</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token variable">$endTime</span> <span class="token operator">-</span> <span class="token variable">$startTime</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"s"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 对于批量的获取，上面是一种效率低的办法，实际可以通过get获取到value，然后自己计算 * 具体计算方法改天再写吧，之前写的代码找不见了。。。*/</span></code></pre>]]></content>
    
    <summary type="html">
    
      关于redis的bitmap的一些命令说明以及一些使用场景
    
    </summary>
    
    
      <category term="Redis" scheme="https://yizero10.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://yizero10.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>周报0316~0322</title>
    <link href="https://yizero10.github.io/2020/03/22/%E5%91%A8%E6%8A%A50316~0322/"/>
    <id>https://yizero10.github.io/2020/03/22/%E5%91%A8%E6%8A%A50316~0322/</id>
    <published>2020-03-22T08:49:15.000Z</published>
    <updated>2020-03-23T12:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主要完成内容"><a href="#主要完成内容" class="headerlink" title="主要完成内容"></a>主要完成内容</h3><ol><li>完成缅怀秦老先生献花点烛留言板的后端开发，并上线-&gt;<a href="http://mournqinhuali.njupt.edu.cn/mourn/" target="_blank" rel="noopener">传送门</a></li><li>完成电费/跑操预警推送后台人为控制，已上线</li><li>讨论并且敲定新注册方案，已进入测试阶段</li></ol><h3 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h3><h4 id="项目war包部署"><a href="#项目war包部署" class="headerlink" title="项目war包部署"></a>项目war包部署</h4><ol><li><p>打成war包要将springboot自带的tomcat排除掉</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li><p>使用外部tomcat还需要继承<code>SpringBootServletInitializer</code>类，并且需要重写configure方法</p><p>如果不继承该类会怎么样呢？答：项目无法使用外部容器启动</p><p>如果重复继承会怎么样呢？答：项目可以启动，但是会遇到很多不可预期的问题</p><p><img src="https://www.yunforum.net/uploadfile/editor/0/2/2808.png" alt="img"></p></li></ol><h4 id="nginx配置问题"><a href="#nginx配置问题" class="headerlink" title="nginx配置问题"></a>nginx配置问题</h4><ul><li>root和alias的区别主要在于替换的部分，root模式中，会把root配置的路径替换匹配后的url中的host。alias则把他指定的路径，替换url中匹配的部分。指令中的斜杠对于root指令没有影响，对于alise则按照替换规则匹配即可。</li><li>通常最佳实际是配置一个项目的根root，其他的文件夹则使用alias，毕竟alias更加灵活。</li><li>修改配置文件之后要重启，<code>nginx -s reload</code></li></ul><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span>static <span class="token punctuation">{</span>    <span class="token keyword">root</span> <span class="token operator">/</span>vagrant<span class="token operator">/</span>pro<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#计算路径/vagrant/pro + /static/stc.jpg</span></code></pre><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span>upload <span class="token punctuation">{</span>    <span class="token keyword">alias</span> <span class="token operator">/</span>vagrant<span class="token operator">/</span>pro<span class="token operator">/</span>upload<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#计算路径 /vagrant/pro/upload/ + /up.png</span></code></pre><ul><li>/对root指令无太大影响，而alias对斜杠的要求更高</li></ul><h4 id="SpringBoot自带的Async注解"><a href="#SpringBoot自带的Async注解" class="headerlink" title="SpringBoot自带的Async注解"></a>SpringBoot自带的Async注解</h4><ul><li>@Async起作用必须在入口类上配置 @EnableAsync开启异步处理</li><li>必须要新建一个类，类中写入task的方法，并加上注释</li><li>异步处理最好要自己定义线程池，此时@Async注解可以在括号中指定线程池的名称</li></ul><h3 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h3><ol><li>开始学习一波SpringCloud，慢慢写个demo</li><li>落下了两周的课 先补回来 T_T</li><li>三道算法题</li></ol>]]></content>
    
    <summary type="html">
    
      3.16~3.22一周的总结(踩坑记录)以及下周的规划
    
    </summary>
    
    
      <category term="周报" scheme="https://yizero10.github.io/categories/%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="周报" scheme="https://yizero10.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="SpringBoot" scheme="https://yizero10.github.io/tags/SpringBoot/"/>
    
      <category term="踩坑" scheme="https://yizero10.github.io/tags/%E8%B8%A9%E5%9D%91/"/>
    
      <category term="nginx" scheme="https://yizero10.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
